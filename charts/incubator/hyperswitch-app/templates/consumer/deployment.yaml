{{- if .Values.services.consumer.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {{- with (default .Values.global.annotations .Values.consumer.annotations) }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  name: hyperswitch-consumer-{{ include "version.suffix" .Values.services.consumer.version }}
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: {{ default .Values.global.progressDeadlineSeconds .Values.consumer.progressDeadlineSeconds }}
  replicas: {{ default .Values.global.replicas .Values.consumer.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.consumer.labels.app }}
      version: consumer-{{ include "version.suffix" .Values.services.consumer.version }}
  strategy:
    {{- with (default .Values.global.strategy .Values.consumer.strategy) }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2023-04-21T14:21:23+05:30"
        checksum/consumer-config: {{ include (print $.Template.BasePath "/consumer/configmap.yaml") . | sha256sum }}
        checksum/hyperswitch-configs: {{ include (print $.Template.BasePath "/misc/configmap.yaml") . | sha256sum }}
        checksum/hyperswitch-secrets: {{ include (print $.Template.BasePath "/misc/secrets.yaml") . | sha256sum }}
      labels:
        app: {{ .Values.consumer.labels.app }}
        version: consumer-{{ include "version.suffix" .Values.services.consumer.version }}
    spec:
      {{- with (default .Values.global.tolerations .Values.consumer.tolerations) }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (default .Values.global.affinity .Values.consumer.affinity) }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (default .Values.global.nodeSelector .Values.consumer.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- include "postgresql.initContainer.check.ready" . | nindent 8 }}
        {{- if .Values.redisMiscConfig.checkRedisIsUp.initContainer.enable }}
        {{- include "redis.initContainer.check.ready" . | nindent 8 }}
        {{- end }}
      containers:
        - name: hyperswitch-consumer
          {{- $registry := .Values.global.imageRegistry | default .Values.services.consumer.imageRegistry }}
          image: "{{ $registry }}/{{ .Values.services.consumer.image }}:{{ .Values.services.consumer.version }}"
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - pkill -15 node
          env:
            - name: BINARY
              value: {{ .Values.consumer.env.binary }}
          {{- include "metadata.envs" . | nindent 12 }}
          {{- include "generic.envs" . | nindent 12 }}
          {{- if .Values.global.useExternalSecrets.enabled }}
          {{- include "external.secrets.envs" . | nindent 12 }}
          {{- else }}
          {{- include "postgresql.secrets.envs" . | nindent 12 }}
          {{- end }}
          {{- include "keymanager.envs" . | nindent 12 }}
          {{- include "hyperswitch.configToEnvRefs" (dict "config" .Values.server.configs "prefix" "ROUTER" "context" .) | nindent 12 }}
          envFrom:
            - configMapRef:
                name: hyperswitch-configs
          {{- if not .Values.global.useExternalSecrets.enabled }}
            - secretRef:
                name: hyperswitch-secrets
          {{- end }}
          resources:
            {{- with (default .Values.global.resources .Values.consumer.resources) }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            {{- if eq .Values.server.run_env "production" }}
            - mountPath: /local/config/production.toml
              name: hyperswitch-config
              subPath: consumer.toml
            {{- else }}
            - mountPath: /local/config/sandbox.toml
              name: hyperswitch-config
              subPath: consumer.toml
            {{- end }}


      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: hyperswitch-router-role
      terminationGracePeriodSeconds: {{ .Values.consumer.terminationGracePeriodSeconds }}
      volumes:
        - configMap:
            defaultMode: 420
            name: consumer-cm-{{ .Release.Name }}
          name: hyperswitch-config
{{- end }}
