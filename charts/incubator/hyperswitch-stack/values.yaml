# loadbalancer security group
# @ignored
loadBalancer:
  targetSecurityGroup: &lb_security_group lg-security-group

# @ignored
service:
  type: ClusterIP
  port: 80

# @ignored
services:
  router:
    host: &router_host http://localhost:8080
  sdk:
    host: &web_sdk_host http://localhost:9050

global:
  tolerations: []
  # @ignored
  # Eg.
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #         - matchExpressions:
  #             - key: node-type
  #               operator: In
  #               values:
  #                 - generic-compute
  affinity: {}

# @ignored
hyperswitch-web:
  fullnameOverride: "hyperswitch-web"
  enabled: true
  sdkDemo:
    enabled: false
  image:
    pullPolicy: IfNotPresent
  podAnnotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  autoBuild:
    enable: true
    forceBuild: true
    gitCloneParam:
      gitVersion: 0.125.0
    nginxConfig:
      extraPath: v1
    buildParam:
      envSdkUrl: *web_sdk_host
      envBackendUrl: *router_host
      envLogsUrl: http://localhost:3103
  service:
    port: 9050
  loadBalancer:
    targetSecurityGroup: "loadbalancer-sg"
  tolerations: []
  ingress:
    enabled: true
    className: "alb"
    apiVersion: networking.k8s.io/v1
    annotations:
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
      alb.ingress.kubernetes.io/group.name: hyperswitch-web-alb-ingress-group
      alb.ingress.kubernetes.io/ip-address-type: ipv4
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
      alb.ingress.kubernetes.io/load-balancer-name: hyperswitch-web
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/security-groups: *lb_security_group
      alb.ingress.kubernetes.io/tags: stack=hyperswitch-lb
      alb.ingress.kubernetes.io/target-type: ip
    hosts:
      - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hyperswitch-web
                port:
                  number: 80
# @ignored
hyperswitch-app:
  initDB:
    enable: true
  loadBalancer:
    targetSecurityGroup: *lb_security_group
  services:
    router:
      version: v1.116.0
      image: docker.juspay.io/juspaydotin/hyperswitch-router:v1.116.0
      host: *router_host
    consumer:
      version: v1.116.0
      image: docker.juspay.io/juspaydotin/hyperswitch-consumer:v1.116.0
    producer:
      version: v1.116.0
      image: docker.juspay.io/juspaydotin/hyperswitch-producer:v1.116.0
    drainer:
      image: docker.juspay.io/juspaydotin/hyperswitch-drainer:v1.116.0
      version: v1.116.0
    controlCenter:
      image: docker.juspay.io/juspaydotin/hyperswitch-control-center:v1.37.3
    sdk:
      host: *web_sdk_host
      version: 0.125.0
      subversion: v1
  server:
    replicas: 1
    secrets:
      # Follow https://github.com/juspay/hyperswitch/tree/main/crates/analytics#setting-up-forex-apis to get the forex api key
      forex_api_key: forex_api_key
      forex_fallback_api_key: forex_fallback_api_key
    locker:
      locker_enabled: true
    run_env: sandbox
    email:
      active_email_client: SMTP
  controlCenter:
    env:
      default__features__email: "true"
      default__features__totp: "true"
      default__features__test_processors: "true"
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 4
    targetCPUUtilizationPercentage: 80

  hyperswitch-card-vault:
    enabled: true
    server:
      image: docker.juspay.io/juspaydotin/hyperswitch-card-vault:v0.6.5-dev
      tenant_secrets:
        hyperswitch:
          master_key: "8283d68fdbd89a78aef9bed8285ed1cd9310012f660eefbad865f20a3f3dd9498f06147da6a7d9b84677cafca95024990b3d2296fbafc55e10dd76df"
          public_key: ""
          schema: "public"

    initDB:
      enable: true
    postgresql:
      primary:
        tolerations: []
  redis:
    master:
      tolerations: []
  postgresql:
    primary:
      tolerations: []
    readReplicas:
      tolerations: []
  kafka:
    controller:
      tolerations: []
    broker:
      tolerations: []
    zookeeper:
      tolerations: []
    provisioning:
      tolerations: []
  clickhouse:
    tolerations: []
    zookeeper:
      tolerations: []
  mailhog:
    tolerations: []
  vector:
    tolerations: []

hyperswitch-monitoring:
  enabled: true
  # Global tolerations for monitoring components
  global:
    tolerations: []
  # Component-specific tolerations
  kube-prometheus-stack:
    prometheus:
      prometheusSpec:
        tolerations: []
    grafana:
      tolerations: []
    alertmanager:
      alertmanagerSpec:
        tolerations: []
  loki:
    singleBinary:
      tolerations: []
  promtail:
    tolerations: []
  opentelemetry-collector:
    tolerations: []

# @ignored
hyperswitch-ucs:
  enabled: true
  fullnameOverride: "hyperswitch-ucs"
  image:
    repository: ghcr.io/juspay/connector-service
    pullPolicy: IfNotPresent
    tag: "main-b1487cb"
  imagePullSecrets: []
  nameOverride: ""

  serviceAccount:
    create: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

  service:
    type: ClusterIP
    grpc:
      port: 8000
      targetPort: 8000
    metrics:
      port: 8080
      targetPort: 8080

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: hyperswitch-ucs.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage:
      80
      # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Configuration via ConfigMap
  config:
    log:
      console:
        enabled: true
        level: "DEBUG"
        log_format: "json"
    server:
      host: "0.0.0.0"
      port: 8000
      type: "grpc"
    metrics:
      host: "0.0.0.0"
      port: 8080
    connectors:
      adyen:
        base_url: "https://{{merchant_endpoint_prefix}}-checkout-live.adyenpayments.com/checkout/"
        dispute_base_url: "https://{{merchant_endpoint_prefix}}-ca-live.adyen.com/"
      razorpay:
        base_url: "https://api.razorpay.com/"
      fiserv:
        base_url: "https://cert.api.fiservapps.com/"
      elavon:
        base_url: "https://api.convergepay.com/VirtualMerchant/"
      xendit:
        base_url: "https://api.xendit.co/"
      razorpayv2:
        base_url: "https://api.razorpay.com/"
      checkout:
        base_url: "https://api.checkout.com/"
      authorizedotnet:
        base_url: "https://api.authorize.net/xml/v1/request.api/"
    proxy:
      https_url: ""
      http_url: ""
      idle_pool_connection_timeout: 90
      bypass_proxy_urls: ["localhost", "local"]
