apiVersion: batch/v1
kind: Job
metadata:
  name: poststart-hook
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5" # Higher weight runs it last
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: poststart-hook
          image: curlimages/curl-base:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Install dependencies
              apk add --no-cache curl jq
              # URLs
              PLATFORM="{{- if .Release.IsInstall }}helm{{- else if .Release.IsUpgrade }}helm-upgrade{{- end }}"
              VERSION="{{ .Chart.Version }}"
              STATUS=""
              SERVER_HEALTH_URL="http://hyperswitch-server:80/health"
              HYPERSWITCH_DEEP_HEALTH_URL="http://hyperswitch-server:80/health/ready"
              WEBHOOK_URL="https://hyperswitch.gateway.scarf.sh/$PLATFORM"

              MAX_RETRIES=30  # Maximum attempts before exiting
              ATTEMPT=0

              until curl -sSf $SERVER_HEALTH_URL > /dev/null; do
                  ATTEMPT=$((ATTEMPT + 1))
                  if [ "$ATTEMPT" -ge "$MAX_RETRIES" ]; then
                      echo "Max retries reached."
                      PARAMS="version=$VERSION"
                      STATUS="error"
                      ERROR_MESSAGE=$(echo "404 response" | jq -sRr @uri)
                      PARAMS="$PARAMS&status=$STATUS"
                      PARAMS="$PARAMS&error_message=$ERROR_MESSAGE"
                      curl -G "$WEBHOOK_URL?$PARAMS"
                      echo "Webhook notification sent."
                      exit 0
                  fi
                  sleep 2
              done

              # Fetch health status
              echo "Fetching Hyperswitch health status..."
              HEALTH_RESPONSE=$(curl -s "$HYPERSWITCH_DEEP_HEALTH_URL")

              echo "Raw response: $HEALTH_RESPONSE"

              # Initialize parameters
              PARAMS="version=$VERSION"

              # Check if the response contains an error
              if echo "$HEALTH_RESPONSE" | grep -q '"error"'; then
                  STATUS="error"
                  ERROR_TYPE=$(echo "$HEALTH_RESPONSE" | jq -r '.error.type' | jq -sRr @uri)
                  ERROR_MESSAGE=$(echo "$HEALTH_RESPONSE" | jq -r '.error.message' | jq -sRr @uri)
                  ERROR_CODE=$(echo "$HEALTH_RESPONSE" | jq -r '.error.code' | jq -sRr @uri)

                  echo "Extracted error details:"
                  echo "ERROR_TYPE: '$ERROR_TYPE'"
                  echo "ERROR_MESSAGE: '$ERROR_MESSAGE'"
                  echo "ERROR_CODE: '$ERROR_CODE'"

                  PARAMS="$PARAMS&status=$STATUS"
                  PARAMS="$PARAMS&error_type=$ERROR_TYPE"
                  PARAMS="$PARAMS&error_message=$ERROR_MESSAGE"
                  PARAMS="$PARAMS&error_code=$ERROR_CODE"
              else
                  STATUS="success"
                  for key in $(echo "$HEALTH_RESPONSE" | jq -r 'keys_unsorted[]'); do
                      value=$(echo "$HEALTH_RESPONSE" | jq -r --arg key "$key" '.[$key]' | jq -sRr @uri)
                      PARAMS="$PARAMS&$key=$value"
                  done
              fi

              echo "Final URL Parameters: $PARAMS"

              # Send GET request to the webhook
              curl -G "$WEBHOOK_URL?$PARAMS"

              echo "Webhook notification sent."

              exit 0
